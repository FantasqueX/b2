# Copyright 2003 Dave Abrahams
# Copyright 2003, 2005, 2006 Rene Rivera
# Copyright 2003, 2005, 2006 Vladimir Prus
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at
# https://www.bfgroup.xyz/b2/LICENSE.txt)

{
    # Add module subdirectories to the BOOST_BUILD_PATH, which allows us to make
    # incremental refactoring steps by moving modules to appropriate
    # subdirectories, thereby achieving some physical separation of different
    # layers without changing all of our code to specify subdirectories in
    # import statements or use an extra level of qualification on imported
    # names.

    local subdirs =
        kernel        # only the most-intrinsic modules: modules, errors
        util          # low-level substrate: string/number handling, etc.
        build         # essential elements of the build system architecture
        tools         # toolsets for handling specific build jobs and targets.
        contrib       # user contributed (unreviewed) modules
        .             # build-system.jam lives here
        ;
    local whereami = [ NORMALIZE_PATH $(.bootstrap-file:DT) ] ;
    BOOST_BUILD_PATH += $(whereami:D)/$(subdirs) ;

    modules.poke .ENVIRON : BOOST_BUILD_PATH : $(BOOST_BUILD_PATH) ;
}

# Reload the modules, to clean up things. The modules module can tolerate being
# imported twice.
#
import modules ;

# Process option plugins first to allow them to prevent loading the rest of the
# build system.
#
import option ;
local dont-build = [ option.process ] ;

# Should we skip building, i.e. loading the build system, according to the
# options processed?
#
if ! $(dont-build)
{
    # Allow users to override the build system file from the command-line
    # (mostly for testing).
    local build-system = [ MATCH --build-system=(.*) : $(ARGV) ] ;
    build-system ?= build-system ;

    # Use last element in case of multiple command-line options.
    import $(build-system[-1]) ;
}
